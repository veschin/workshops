#+title: Clojure Воркшоп 2
#+author: veschin
#+language: ru

* Дисклеймер
#+BEGIN_QUOTE
Чистая совесть дорого стоит. ---Saul Goodman
#+END_QUOTE

Только попытка научить других показывает, насколько плохо ты сам понимаешь чем занимаешься.
Я уверен что допустил много глупых неточностей, которые режут слух знающему человеку.
Но я продолжу идти по граблям.

** Работа над ошибками
*** Keyword
Я не нашел подтверждения своим словам про то что каждый кейворд уникальный
Почитав офф доки, могу исправить определение

Кейворд - константа, как и символ
 - которая очень дешево тестируется с другими кейвордами,
 - позволяет расширять семантику за счет неймспейсов
 - может применяться вместо функции ~get~
#+begin_src clojure
(= :a :a)
;; => true

(= :b/a :b/a)
;; => true

(= :a :b)
;; => false

(:a {:a 10})
;; => 10
#+end_src

*** Lists
Из списков можно брать значения по индексу
#+begin_src clojure
(nth (list 1 2 3 4 5) 0)
;; => 1
#+end_src
Список - последовательный, связанный список
Добавляет новые значения в начало списка, а не в конец, как вектор.


* Предисловие по языку
** Функциональный
Поощряется функциональный подход.
~Все имеет результат~.
Можно управлять ~функциями как значениями~.
Можно ~композировать функции~.

~Чистая функция~ - функция, которая ~при одинаковых входных данных~, ~всегда~ дает ~одинаковый результат~
#+begin_src clojure
(defn pure [a] (+ a a))

[(pure 2) (pure 2) (pure 2) (pure 2)]
;; => [4 4 4 4]

#+end_src

Свобода в создании и использовании функций
#+begin_src clojure
(fn [])
;; => fn

(defn closure [a]
  (fn []
    (a + 10)))
;; #'user/closure

(closure 5)
;; => (fn [] (5 + 10))

((closure 5))
;; => 15
#+end_src

Почему бы нам не сделать словарь функций
#+begin_src clojure
(def funcs
  {:plus5 (fn [a] (+ a 5))
   :minus10 (fn [b] (- b 10))})

((:plus5 funcs) 10)
;; => 15

((:minus10 funcs) 10)
;; => 0
#+end_src

** Иммутабельный
Мы ~не мутируем~ (перезаписываем) значение переменной.
Мы ~создаем копию~ или меняем ссылку на объект
#+begin_src java
int i = 5;
i = 6;
// 6
#+end_src

#+begin_src clojure
(def i 5)

(def i* (inc i))

[i i*]
;; => [5 6]
#+end_src
** Ленивый
~Если~ какое то ~значение не используется~
На него ~не будут затрачены ресурсы~

Но можно заставить вычислить, если мы хотим гарантий в сложных местах
например функциями ~[doall run! doseq]~
#+begin_src clojure
(defmacro bench [& body]
  `(with-out-str
     (time
      ~@body)))

(bench (take 100000 (repeatedly #(rand-int 100))))
;; => "\"Elapsed time: 0.023464 msecs\"\n"
;; => "\"Elapsed time: 0.023835 msecs\"\n"
;; => "\"Elapsed time: 0.046217 msecs\"\n"
;; => "\"Elapsed time: 0.02632 msecs\"\n"

(bench (doall (take 100000 (repeatedly #(rand-int 100)))))
;; => "\"Elapsed time: 11.117991 msecs\"\n"
;; => "\"Elapsed time: 9.675811 msecs\"\n"
;; => "\"Elapsed time: 5.69942 msecs\"\n"
;; => "\"Elapsed time: 9.814532 msecs\"\n"


(bench
 (doall
  (let [a (range 10)
        b (range 100)])))
;; => "\"Elapsed time: 0.010209 msecs\"\n"
;; => "\"Elapsed time: 0.010019 msecs\"\n"
;; => "\"Elapsed time: 0.006863 msecs\"\n"

(bench
 (doall
  (let [a (range 10)
        b (range 100)]
    [a b])))
;; => "\"Elapsed time: 0.058229 msecs\"\n"
;; => "\"Elapsed time: 0.117121 msecs\"\n"
;; => "\"Elapsed time: 0.091814 msecs\"\n"
#+end_src

** Персистентные структуры
~Структура данных~, как гит репозиторий.
~Хранит значение при инициализации, и шаги воспроизведения~.
Мы редко копируем что-то полностью, чаще ~мы меняем последние шаги работы со структурой~
Поэтому иммутабельность, стоит дешево.
#+begin_src clojure
(def v [1 2])

(def v2 (conj v 3))
;; [1 2] + 3 = [1 2 3]

(def v3 (conj v2 4))
;; [1 2] + 3 + 4 = [1 2 3 4]

(def v4 (conj v2 5))
;; [1 2] + 3 + 5 = [1 2 3 5]

v
;; => [1 2]

v2
;; => [1 2 3]

v3
;; => [1 2 3 4]

v4
;; => [1 2 3 5]
#+end_src
** Data Driven
#+BEGIN_QUOTE
Меня греет мысль, что бриллиант и женщина, надевшая его на палец,
состоят из одного и того же элемента. ---Walter White
#+END_QUOTE

~Мы работаем с данными~.
Мы ~получаем данные~, и мы ~отдаем данные~.
Иногда чтобы что-то сделать, ~не нужно изобретать абстракцию~
Почти всегда ~достаточно того, что предлагает язык~.

~Концептуальные ограничения~, делают наш код болле продуманным,
а следовательно ~надежным и боллее чистым~.

~Синтаксические ограничения~, делают наш код громостским,
а следовательно ~менее надежным и трудночитаемым~.

*** Примеры
**** Юзер
Допустим, мы хотим сделать какого юзера
Будем хранить его в мапке, не создавая класс или что-то еще

#+begin_src clojure
(def person
  {:name  "A"
   :lname "B"
   :age   43})

(:age person)
;; => 43

(def person-with-bdate (assoc person :bdate "10.10.1980"))
;; => {:name "A", :lname "B", :age 43, :bdate "10.10.1980"}

(def person-with-inced-age (update person-with-bdate :age inc))
;; => {:name "A", :lname "B", :age 44}
#+end_src
**** Много юзеров
Допустим, идея с юзерам понравилась бизнесу, и мы должны хранить много юзеров
Теперь у нас будет функция, чтобы сделать из разных данных, юзера
#+begin_src clojure
(defn ->person [& [name lname age bdate]]
  {:name  name
   :lname lname
   :age   age
   :bdate bdate})

(->person "C" "D" 44 "10.10.1979")
;; => {:name "C", :lname "D", :age 44, :bdate "10.10.1979"}

(->person "V" "F" 45 "10.10.1978")
;; => {:name "V", :lname "F", :age 45, :bdate "10.10.1978"}
#+end_src

**** Юзер в SQL
В какой то момент, мы поняли что все равно будем хранить в базе
И написали функцию, которая перевод хэшмапу в валидный ~SQL запрос~
#+begin_src clojure

(require '[clojure.string :as str])
(defn sql-for-persons [person]
  (format "INSERT INTO PERSONS %s VALUES %s;"
          (seq (mapv name (keys person)))
          (vals person)))

(sql-for-persons (->person "V" "F" 45 "10.10.1978"))
;; => "INSERT INTO PERSONS (\"name\" \"lname\" \"age\" \"bdate\") VALUES (\"V\" \"F\" 45 \"10.10.1978\");"
#+end_src

**** Валидация
Плохо жить без валидации
Мы сделали функцию ~validate!~, которая принимает хэшмапы,
с набором ключей и функциями, которые нужно применить к ключам

Сделали хэшмапу ~person?~ которая хранит в себе ключи и функции для них
#+begin_src clojure
(def person?
  {:name string?
   :lname string?
   :age int?
   :bdate string?})

(defn validate! [vmap data]
  (not (some (fn [[k v]] (not ((k vmap) v))) data)))

(validate! person? (->person "C" "D" 44 "10.10.1979"))
;; => true
#+end_src


В какой то момент мы поняли что для некоторых юзеров у нас другая логика валидации
Как удобно, что мы заложили разные мапы-валидации на этапе проектирования
#+begin_src clojure
(def person?*
  {:name string?
   :lname string?
   :age (some-fn nil? int?)
   :bdate (some-fn nil? string?)})

(validate! person?* (->person "C" "D"))
;; => true

(validate! person? (->person "C" "D"))
;; => false
#+end_src

*** История одного проекта
Как то довелось мне писать движок 2D графики на голом DOM дереве в JavaScript
(~CLJS~ ~SVG API~ ~vDOM~ ~React|Reagent~)
Это был проект с большой кодовой базой, где я развлекался в создании велосипедов
От самописных ORM'ок до систем группировок для виртуального DOM
(Это был сложный технический калькулятор, посредством визуального программирования, как фигма)

Самым большим профитом ~Clojure/ClojureScript~ была возможность превращать громостские данные, в очень удобные структуры

**** Генерация SVG элементов из мап
Из обычных хэшмап
#+begin_src clojure
(def css-for-rect [rect]
  {:width  :0.5vw
   :height :1vh
   :color  (random-color)})

{:shape :rect
 :id    :shape1}

#+end_src

#+begin_src html
<svg>
  <rect class="rect" id="shape1">
</svg>
#+end_src

#+begin_src css
.rect {
    width:  0.5vw;
    height: 1vh;
}

#shape1 {color: "#000";}
#+end_src

**** Масштабирование
#+begin_src clojure
(def state
  [{:shape :rect
    :id    :shape1}
   {:shape :circle
    :id    :shape2}
   {:shape :star
    :id    :shape3}
   {:shape :triangle
    :id    :shape4}])

(render-shapes! state)
#+end_src

#+begin_src html
<svg>
  <rect class="rect" id="shape1">
  <circle id="shape2">
  <star id="shape3">
  <triangle id="shape4">
</svg>
#+end_src

**** Вложенность
Со временем появилась потребность в во вложенных фигурах:
 - с наследованием позиций на странице
 - или стилей
 - или особым порядком
 - или высшим приоритетом

#+begin_src clojure
(def state
  [{:shape :rect
    :id    :shape1
    :order 0
    :parent :shape4
    :children [:shape2 :shape3]}
   {:shape :circle
    :id    :shape2}
   {:shape :star
    :id    :shape3}
   {:shape :triangle
    :id    :shape4}])
#+end_src

#+begin_src clojure

(defn render! [& shapes]
  (-> shapes
      (sort-by-order)
      (create-pretty-stuff)
      (generate-links)
      (compute-values)
      (optimize)
      (render)))

#+end_src

#+begin_src html
<svg>
  <triangle id="shape4">
  <!-- rect-triangle -->
  <line/>
  <!-- to-circle -->
  <line/>
  <!-- to-star -->
  <line/>
  <div id="group">
    <rect class="rect" id="shape1">
    <circle id="shape2">
    <star id="shape3">
  </div>
</svg>
#+end_src
**** DSL
Cтруктуры росли в размерах и сложности обхода
Могли быть рекурсивными, с разными опциями обхода

В конце концов родился мини-язык внутри мини языка
#+begin_src clojure
(def state
  [{:shape :rect
    :id    :shape1
    :order 0
    :parent :shape4
    :children [:shape2 :shape3]}
   {:shape :circle
    :id    :shape2
    :opts {:x 0
           :y 50}}
   {:shape :star
    :id    :shape3
    :opts {:x 10
           :y 50}}
   {:shape :triangle
    :id    :shape4}])

(defn transform-in [path fn-map val]
   (-> (parse-path path)
       (apply-fn-map val)
       (reduce-back)))

(transform-in
 [:shape1 :children :coll/all]
 {:opts {:x #(+ 100 %)
         :y #(/ % 2)}
  :order inc
  :links :shape1}
 state)

;; [{:shape :rect
;;   :id    :shape1
;;   :order 0
;;   :parent :shape4
;;   :children [:shape2 :shape3]}
;;  {:shape :circle
;;   :id    :shape2
;;   :order 1
;;   :opts {:x 100
;;          :y 25}
;;   :links :shape1}
;;  {:shape :star
;;   :id    :shape3
;;   :order 1
;;   :opts {:x 110
;;          :y 25}
;;   :links :shape1}
;;  {:shape :triangle
;;   :id    :shape4}]
#+end_src


* Козыри пошли
** Деструктуризация
Синтаксическая возможность "раскладывать" элементы массива (и не только)
в отдельные константы или переменные
*** JavaScript
#+begin_src javascript
const [a, b] = [1, 2];
const { a, b } = {"a": 1, "b": 2};
#+end_src
*** Простая деструктуризация
#+begin_src clojure
(let [[a b c] [1 2 3]]
  b)
;; => 2

(let [[a & _] [1 2 3]]
  a)
;; => 1

(let [[_ & bc] [1 2 3]]
  bc)
;; => (2 3)
#+end_src
*** Продвинутая деструктуризация
#+begin_src clojure
(defn destruct
  [[a b c]
   {:keys [k1 k2]}
   {:strs [s1 s2]}]
  [a b c k1 k2 s1 s2])

(destruct [1 2 3] {:k1 4 :k2 5} {"s1" 6 "s2" 7})

#+end_src
** Стрелочки
#+begin_src clojure
;; NOTE: эти формы равны между собой.
;; стрелочный макрос в любом случае превратится, в форму выше

(+ 1 (count (conj 6 (conj 5 [1 2 3 4]))))

(+ 1
   (count
    (conj 6
          (conj 5
                [1 2 3 4]))))

(->> [1 2 3 4]
     (conj 5) ;; => [1 2 3 4 5]
     (conj 6) ;; => [1 2 3 4 5 6]
     (count) ;; => 6
     (+ 1)) ;; => 7
#+end_src
