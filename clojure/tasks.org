#+title: Задачи
* Легенда
Представлены кодблоки

В начале кодблока - ~входные данные~

Разделены через пустую строку - ~результаты~
(если на весь код блок только одни данные - значит нужно просто их получить)
Формат данных имеет значение. Если в результате вектор, нужно вернуть не список или мапу, а вектор.

Придумайте как из одних данных получить другие

Пускай решение лежит в одном файле формата ~.clj~
И каждая задача будет в виде функции
Пример
#+begin_src clojure
(defn ex1 []
  (vec (range 2 7)))

(defn ex2 [coll]
  ...
  )
#+end_src
* ex1
#+begin_src clojure
[2 3 4 5 6]
#+end_src
* ex2
#+begin_src clojure
[1 2 3 4 5]

[2 4 6 8 10]
#+end_src
* ex3
#+begin_src clojure
[1 2 3 4 5 6]

21
#+end_src
* ex4
#+begin_src clojure
{}

{:a 10 :b [1 2 3 4 5]}
#+end_src
* ex5
#+begin_src clojure
{:a 10 :b [1 2 3 4 5]}

(let [_
      [& last-] _]
  [a last-])
;; => 10 5
#+end_src
* ex6
#+begin_src clojure
"="

"2 + 2 = 4"
#+end_src
* ex7*
#+begin_src clojure
[1 2 3 4 5]

[{:b 1} {:a 2} {:b 3} {:a 4} {:b 5}]
#+end_src
* ex8*
#+begin_src clojure
"abcd"
[1 2 3 4]

"a1b2c3d4"
#+end_src
* ex9*
#+begin_src clojure
{:a {:b {:c {:d {:e 10}}}}}

[["a" "b" "c" "d" "e"]
 10]
#+end_src
