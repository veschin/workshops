#+title: Clojure Воркшоп 3
#+author: veschin
#+language: ru

* Data Driven v2
** История одного проекта
Как то довелось мне писать движок 2D графики на голом DOM дереве в JavaScript
(~CLJS~ ~SVG API~ ~vDOM~ ~React|Reagent~)
Это был проект с большой кодовой базой, где я развлекался в создании велосипедов
От самописных ORM'ок до систем группировок для виртуального DOM
(Это был сложный технический калькулятор, посредством визуального программирования, как фигма)

Самым большим профитом ~Clojure/ClojureScript~ была возможность превращать громостские данные, в очень удобные структуры

*** Генерация SVG элементов из мап
Из обычных хэшмап
#+begin_src clojure
(def css-for-rect [rect]
  {:width  :0.5vw
   :height :1vh
   :color  (random-color)})

{:shape :rect
 :id    :shape1}

#+end_src

#+begin_src html
<svg>
  <rect class="rect" id="shape1">
</svg>
#+end_src

#+begin_src css
.rect {
    width:  0.5vw;
    height: 1vh;
}

#shape1 {color: "#000";}
#+end_src

*** Масштабирование
#+begin_src clojure
(def state
  [{:shape :rect
    :id    :shape1}
   {:shape :circle
    :id    :shape2}
   {:shape :star
    :id    :shape3}
   {:shape :triangle
    :id    :shape4}])

(render-shapes! state)
#+end_src

#+begin_src html
<svg>
  <rect class="rect" id="shape1">
  <circle id="shape2">
  <star id="shape3">
  <triangle id="shape4">
</svg>
#+end_src

*** Вложенность
Со временем появилась потребность в во вложенных фигурах:
 - с наследованием позиций на странице
 - или стилей
 - или особым порядком
 - или высшим приоритетом

#+begin_src clojure
(def state
  [{:shape :rect
    :id    :shape1
    :order 0
    :parent :shape4
    :children [:shape2 :shape3]}
   {:shape :circle
    :id    :shape2}
   {:shape :star
    :id    :shape3}
   {:shape :triangle
    :id    :shape4}])
#+end_src

#+begin_src clojure

(defn render! [& shapes]
  (-> shapes
      (sort-by-order)
      (create-pretty-stuff)
      (generate-links)
      (compute-values)
      (optimize)
      (render)))

#+end_src

#+begin_src html
<svg>
  <triangle id="shape4">
  <!-- rect-triangle -->
  <line/>
  <!-- to-circle -->
  <line/>
  <!-- to-star -->
  <line/>
  <div id="group">
    <rect class="rect" id="shape1">
    <circle id="shape2">
    <star id="shape3">
  </div>
</svg>
#+end_src
*** DSL
Cтруктуры росли в размерах и сложности обхода
Могли быть рекурсивными, с разными опциями обхода

В конце концов родился мини-язык внутри мини языка
#+begin_src clojure
(def state
  [{:shape :rect
    :id    :shape1
    :order 0
    :parent :shape4
    :children [:shape2 :shape3]}
   {:shape :circle
    :id    :shape2
    :opts {:x 0
           :y 50}}
   {:shape :star
    :id    :shape3
    :opts {:x 10
           :y 50}}
   {:shape :triangle
    :id    :shape4}])

(defn transform-in [path fn-map val]
   (-> (parse-path path)
       (apply-fn-map val)
       (reduce-back)))

(transform-in
 [:shape1 :children :coll/all]
 {:opts {:x #(+ 100 %)
         :y #(/ % 2)}
  :order inc
  :links :shape1}
 state)

;; [{:shape :rect
;;   :id    :shape1
;;   :order 0
;;   :parent :shape4
;;   :children [:shape2 :shape3]}
;;  {:shape :circle
;;   :id    :shape2
;;   :order 1
;;   :opts {:x 100
;;          :y 25}
;;   :links :shape1}
;;  {:shape :star
;;   :id    :shape3
;;   :order 1
;;   :opts {:x 110
;;          :y 25}
;;   :links :shape1}
;;  {:shape :triangle
;;   :id    :shape4}]
#+end_src




* Repl
Чаще всего этой аббревиатурой характеризуется интерактивная среда языка программирования LISP,
однако такая форма характерна и для интерактивных сред языков
- Erlang
- Groovy
- Haskell
- Java
- JavaScript
- Perl
- PHP
- Python
- Ruby
- Scala
- Smalltalk
- Swift
- Tcl и других

** R ead
Функция ~read~ читает одно выражение и преобразует его в соответствующую структуру данных в памяти
** E val
Функция ~eval~ принимает одну такую структуру данных и вычисляет соответствующее ей выражение
** P rint
Функция ~print~ принимает результат вычисления выражения и печатает его пользователю
** L oop
Бесконечный цикл (~loop~), начинается сначала




